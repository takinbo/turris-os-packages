#!/bin/sh /etc/rc.common
#Copyright (C) 2013 CZ.NIC z.s.p.o. (http://www.nic.cz/)
START=61

CONFIGFILE="/var/etc/unbound/unbound.conf"
ROOTKEYFILE="/etc/root.keys"

header() {
    cat > "$CONFIGFILE" <<-EOF
# auto-generated config file from /etc/config/resolver
EOF
}

set_section() {
    section="$1"
}

add_section() {
    section="$1"
    name="${2:-$1}"

    echo "$name:" >> "$CONFIGFILE"
}

add_include() {
    include_path="$1"
    echo "include: \"$include_path\"" >> "$CONFIGFILE"
}

set_local_zone() {
    host_filename=$1
    if [ "$host_filename" ] && [ -e "$host_filename" ]; then
        sed -n \
        -e 's|^[[:blank:]]*\([0-9.]\+\)[[:blank:]]\+\([^#[:blank:]]\+\)$|\tlocal-zone: "\2." static\n\tlocal-data: "\2. IN A \1\"|p' \
        -e 's|^[[:blank:]]*\([0-9a-f:]\+\)[[:blank:]]\+\([^#[:blank:]]\+\)$|\tlocal-zone: "\2." static\n\tlocal-data: "\2. IN AAAA \1\"|p' \
        -e 's|^[[:blank:]]*\([0-9.]\+\)[[:blank:]]\+\([^#[:blank:]]\+\)[[:blank:]#].*|\tlocal-zone: "\2." static\n\tlocal-data: "\2. IN A \1\"|p' \
        -e 's|^[[:blank:]]*\([0-9a-f:]\+\)[[:blank:]]\+\([^#[:blank:]]\+\)[[:blank:]#].*|\tlocal-zone: "\2." static\n\tlocal-data: "\2. IN AAAA \1\"|p' "$host_filename" >> "$CONFIGFILE"
    fi
}

set_parameter() {
    local var="$1"
    local opt="$2"
    local def="$3"
    local val

    config_get val "$section" "$var"
    val=${val:-$def}
    echo -e "\t$opt: $val" >> "$CONFIGFILE"
}

set_quoted_parameter() {
    local var="$1"
    local opt="$2"
    local def="$3"
    local val

    config_get val "$section" "$var"
    val=${val:-$def}
    echo -e "\t$opt: \"$val\"" >> "$CONFIGFILE"
}

set_bool_parameter() {
    local var="$1"
    local opt="$2"
    local def="$3"
    local val

    config_get_bool val "$section" "$var"
    val=${val:-$def}
    val=$(echo $val | sed -e "s/1/yes/g" -e "s/0/no/g")
    echo -e "\t$opt: $val" >> "$CONFIGFILE"

}

add_parameter() {
    val="$1"
    opt="$2"
    echo -e "\t$opt: $val" >> "$CONFIGFILE"
}

set_multiple_parameters() {
    local var="$1"
    local opt="$2"

    config_list_foreach "$section" "$var" add_parameter "$opt"
}

set_rootkey() {
    local var="$1"
    local val

    config_get val "$section" "$var"
    ROOTKEYFILE="$val"
}

# Check the /etc/unbound/root.key is reasonable and try to fix it with given command
check_root_key() {
    # Don't do anything if it looks OK
    grep -qE '[[:space:]](DNSKEY|DS|TYPE[[:digit:]][[:digit:]])[[:space:]]' $ROOTKEYFILE && return
    # Not OK -> run the command and hope for the best
    echo "Trying to restore broken $ROOTKEYFILE with command $@" | logger -t unbound -p daemon.warning
    eval "$@"
}

get_local_domain() {
    config_get DOMAIN $1 local
    if [ -n "$DOMAIN" ]; then
        DOMAIN="`echo "$DOMAIN" | sed 's|/||g'`"
        echo "  local-zone: \"$DOMAIN.\" static" >> "$CONFIGFILE"
    fi
}

set_local_host() {
    config_get NAME $1 name
    config_get IP $1 ip
    if [ -n "$NAME" ] && [ -n "$DOMAIN" ] && [ -n "$IP" ]; then
        echo "  local-data: \"$NAME.$DOMAIN. IN A $IP\"" >> "$CONFIGFILE"
        echo "  local-data-ptr: \"$IP $NAME.$DOMAIN\"" >> "$CONFIGFILE"
    fi
}

#initialize everything
init_unbound() {
    config_load resolver

    local ignore_root_key
    local hostname_config
    config_get_bool ignore_root_key common ignore_root_key 0

    # Do not try to restore the root key if it's not used
    if [ "$ignore_root_key" = "0" ] ; then
        # Sometimes, the root anchor is broken. We first try unbound-anchor (with and without upstream DNS servers).
        check_root_key unbound-anchor -f /tmp/resolv.conf.auto
        check_root_key unbound-anchor
        # unbound-anchor is of no use :-(. Try to restore it from the certificate backup, if there's anything.
        check_root_key cert-backup -x $ROOTKEYFILE
        # No more ideas what to do, so just try running unbound, something of the above may have worked.
    fi

    #Clear the config and set header
    header

    config_load resolver

    #Server Section
    add_section common server
    echo '	chroot: ""' >> "$CONFIGFILE"
    set_parameter verbose verbosity 1
    set_multiple_parameters interface interface
    set_parameter port port 53

    if [ "$ignore_root_key" = "0" ] ; then
        set_rootkey keyfile
        set_quoted_parameter keyfile auto-trust-anchor-file "$ROOTKEYFILE"
    fi

    set_parameter msg_buffer_size msg-buffer-size 8192
    set_parameter msg_buffer_size edns-buffer-size 8192
    set_parameter msg_cache_size msg-cache-size 100k
    set_bool_parameter net_ipv4 do-ip4 1
    set_bool_parameter net_ipv6 do-ip6 1
    set_parameter prefetch prefetch yes

    config_get hostname_config "unbound" hostname_config ""
    if [ -n "$hostname_config" ] && [ -e "$hostname_config" ] ; then
        set_local_zone $hostname_config
    fi
    config_load dhcp
    config_foreach get_local_domain dnsmasq
    config_foreach set_local_host host
    config_load resolver

    set_section unbound
    set_parameter outgoing_range outgoing-range 60
    set_parameter outgoing_num_tcp outgoing-num-tcp 128
    set_parameter incoming_num_tcp incoming-num-tcp 128
    set_parameter msg_cache_slabs msg-cache-slabs 1
    set_parameter num_queries_per_thread num-queries-per-thread 30
    set_parameter rrset_cache_slabs rrset-cache-slabs 1
    set_parameter rrset_cache_size rrset-cache-size 100k
    set_parameter infra_cache_slabs infra-cache-slabs 1
    set_parameter infra_cache_numhosts infra-cache-numhosts 200
    set_multiple_parameters access_control access-control
    set_quoted_parameter username username ""
    set_quoted_parameter pidfile pidfile "/var/run/unbound.pid"
    set_quoted_parameter root_hints root-hints "/etc/unbound/named.cache"
    set_quoted_parameter target_fetch_policy target-fetch-policy "2 1 0 0 0 0"
    set_parameter harden_short_bufsize harden-short-bufsize yes
    set_parameter harden_large_queries harden-large-queries yes
    set_parameter key_cache_size key-cache-size 100k
    set_parameter key_cache_slabs key-cache-slabs 1
    set_parameter neg_cache_size neg-cache-size 10k
    set_parameter prefetch prefetch yes
    set_parameter prefetch_key prefetch-key yes

    #Python section
    add_section unbound_python python
    set_multiple_parameters python_script python-script

    #Remote Control
    add_section unbound_remote_control remote-control
    set_parameter control_enable control-enable no
    set_multiple_parameters control_interface control-interface
    set_parameter control_port control-port 8953
    set_quoted_parameter server_key_file server-key-file "/etc/unbound/unbound_server.key"
    set_quoted_parameter server_cert_file server-cert-file "/etc/unbound/unbound_server.pem"
    set_quoted_parameter control_key_file control-key-file "/etc/unbound/unbound_control.pem"
    set_quoted_parameter control_cert_file control-cert-file "/etc/unbound/unbound_control.pem"

    #Includes
    config_list_foreach unbound_includes include_path add_include

    local do_forward
    config_get_bool do_forward common forward_upstream 1

    if [ "$do_forward" = "1" ] ; then
        local SERVERS
        SERVERS=$(sed -ne 's/^nameserver \(.*\)/\1/p' /tmp/resolv.conf.auto | sort)
        if [ "$SERVERS" ] ; then
            (
            echo 'forward-zone:'
            echo '	name: "."'
            echo '	forward-first: yes'
            for SERVER in $SERVERS ; do
                echo "	forward-addr: $SERVER"
            done
            ) >> "$CONFIGFILE"
        fi
        md5sum /tmp/resolv.conf.auto | cut -f1 -d\ >/tmp/resolv.conf.auto.last.md5
    fi
}

start() {

    mkdir -p $(dirname "$CONFIGFILE")

    init_unbound
    unbound || (
    sleep 2 # There are temporary failures with ports in unbound sometimes, try again after a while
    unbound
    )
}

reload() {

    mkdir -p $(dirname "$CONFIGFILE")

    init_unbound

    local pidfile
    config_get pidfile unbound pidfile

    if [ -f "$pidfile" ] ; then
        kill -HUP $(cat $pidfile)
    fi
}

stop() {
    config_load resolver

    local pidfile
    config_get pidfile unbound pidfile

    if [ -f "$pidfile" ] ; then
        kill $(cat $pidfile) ; rm -f "$pidfile"
    fi
    sleep 1 # For cleanup of ports and such
}
